{
    "contents" : "\nlibrary(pryr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n# library(ggthemes)\n#library(parallel) # No funciona en windows\n# library(foreach)\n#library(doSNOW)\nlibrary(Matrix)\n# library(ggmap)\n\noptions(scipen = 10) # Solo los numeros grandes en notacion cientifica\n\n\n# Cargar los datos --------------------------------------------------------\n\n# setwd(\"entregable_v2\")\nprint(getwd())\nload('datos/datos_completos.Rdata')\nsource('codigo/funciones.R')\n\n\n# Cálculos previos --------------------------------------------------------\n\na1 <- hoteles %>%\n  dplyr::select(id1=ID_Hotel, n1=Nombre_Hotel, cl1=Clav_Hotel, p1=Precio_Dlls, u1=Utilidad_Dlls,\n                range1=Date_Range,\n                pais1=Nombre_Pais, est1=Nombre_Estado, zip1=Codigo_Postal, stars1=Estrellas,\n                dest1=Clav_Destino, ubic1=Clav_Ubicacion, long1=longitude, lat1=latitude,\n                adult1=Adult_Only, allinc1=Categoria_Alimentos)\na2 <- hoteles %>%\n  dplyr::select(id2=ID_Hotel, n2=Nombre_Hotel, cl2=Clav_Hotel, p2=Precio_Dlls, u2=Utilidad_Dlls,\n                range2=Date_Range,\n                pais2=Nombre_Pais, est2=Nombre_Estado, zip2=Codigo_Postal, stars2=Estrellas,\n                dest2=Clav_Destino, ubic2=Clav_Ubicacion, long2=longitude, lat2=latitude,\n                adult2=Adult_Only, allinc2=Categoria_Alimentos)\n\n\n# Parámetros globales -----------------------------------------------------\n\n# En paréntesis rango y valor recomendado\nalpha <- 0.3377169 # Parámetro de balance (Servicios: 0 -- 1: Perfil). Calculado una única vez\nneeded_weight <- 30 # (1+, 30) Peso a acumular para generar la cerca interior\nprice_range <- 0.3  # (0-1, 0.3) Rango de precio de hoteles a tomar en cuenta para cerca interior\nnum_recom <- 20     # (1+, 20) Número de recomendaciones en precio a dar por hotel\nmin_num_recom <-    # (1+, 10) Número mínimo de recomendaciones (para hoteles en despoblado)\nouter_fence <- 30   # (1+, 30) Radio de la cerca exterior, en kilómetros\nnbatch <- 1         # (1+, 1) Número de bloques para partir el cálculo. Disminuye la cantidad de memoria utilizada. Se recomienda para muchos hoteles.\n\n\n# Modelo completo de recomendaciones --------------------------------------\n\n\nintervalo <- 1:nrow(hoteles)\n\nrecomendados_lista <- lapply(intervalo, function(i){\n  if(i %% 50 == 1) print(i)\n  line <- hoteles[i,]\n  clav <- line$ID_Hotel\n  nserv <- filter(hoteles_categorias, ID_Hotel == clav)$Cantidad %>% sum ### MEJORABLE\n  \n  cand_info <- filtra_cand(clav, hoteles, price_range=price_range,\n                            outer_fence = outer_fence, min_num_recom = min_num_recom)\n  \n  # Candidatos dentro de la cerca exterior o en si se quitó, los primeros min_num_recom\n  if(cand_info$type == 'n closest'){\n    outer_idx <- cand_info$out_idx\n    cand_idx <- rep(TRUE, sum(outer_idx))\n  } else if(cand_info$type == 'dist'){\n    outer_idx <- cand_info$outer_fence_idx\n    cand_idx <- rep(TRUE, sum(outer_idx))\n  } else if(cand_info$type == 'dist & price') {\n    outer_idx <- cand_info$outer_fence_idx\n    cand_idx <- cand_info$precio_idx[cand_info$outer_fence_idx]\n  }\n  cand_outer <- cand_info$cand[outer_idx,]\n  \n  if(nrow(cand_outer) <= 1){\n    selected <- data.frame()\n  } else {\n    \n    salida <- calcula_sim(cand_outer,\n                          mat = categorias_hoteles_sparse_cantidad,\n                          mat_norm = categorias_hoteles_sparse_prob)\n    selected <- cand_outer %>%\n      left_join(salida, by=c('id1','id2')) %>%\n      mutate(temp = nserv,\n             hinge_norm = ifelse(hinge == 0, 0,\n                                 ifelse(temp == 0, 1, hinge/nserv)),\n             score = alpha*(1 - diverg) + (1 - alpha)*(1 - hinge_norm)) %>%\n      dplyr::select(-temp) %>%\n      arrange(km) %>%\n      filter(cumsum(score*cand_idx) < needed_weight) %>%\n      arrange(desc(score))\n    \n    max_km <- max(selected$km)\n  }\n  return(list(selected=selected,         # Hoteles recomendados (ignorando precio)\n              id_hotel=clav,             # Clave del hotel original\n              nserv=nserv,               # Número de servicios del hotel original\n              ncomp=nrow(cand_outer),    # Cantidad de comparaciones efectuadas\n              max_km=max_km,             # Radio de la cerca interior\n              filtro=cand_info$type))    # Tipo de filtro efectuado\n})\n\nrecomendados <- lapply(recomendados_lista, function(l) l$selected ) %>%\n  rbind_all %>% # Es más rápido primero rbind_all y luego filtrar\n  group_by(id1) %>%\n  filter(#id1 != id2,\n         cumsum(p2 <= (1+price_range)*p1) <= num_recom) %>%\n  mutate(rank = row_number()) %>%\n  ungroup %>%\n  left_join(a1[c('id1','cl1')], by='id1') %>%\n  left_join(a2[c('id2','cl2')], by='id2')\nrecomendados\n\n\n# Exploración de resultados -----------------------------------------------\n\nif(FALSE){  \n  object_size(recomendados)\n  object_size(rec)\n  length(recomendados)\n  recomendados[[sample(1:length(recomendados), 1)]]\n  inner <- sapply(recomendados, function(l) nrow(l$selected))\n  outer <- sapply(recomendados, function(l) l$ncomp)\n  filtros <- sapply(recomendados, function(l) l$filtro)\n  \n  qplot(inner, binwidth=5)\n  qplot(outer)\n  qplot(inner, outer)\n  round(table(filtros)/length(filtros), 2)\n  \n  ggplot(rec, aes(score)) +\n    geom_histogram()\n  \n  ids <- unique(rec$id1)\n  temp <- filter(rec, id1 %in% sample(ids, 12))\n  qplot(score, data=temp) +facet_wrap(~ id1)\n  \n  filter(hoteles, ID_Hotel == 2424)\n  \n  # Análisis: Vale la pena poner precios dinámicos? -------------------------\n  \n  \n  x <- recomendados %>%\n    group_by(id1) %>%\n    filter(p1 != Inf & p2 != Inf) %>%\n    mutate(rank = row_number(),\n           p_price = p2/p1) %>%\n    filter(rank <= 16)\n  \n  # Hoteles que entran al ranking con descuento del 0%, 10%, 20%...\n  descuentos <- 1-c(1,0.9,0.8,0.7,0.6)\n  rangos <- (1+price_range)/(1-descuentos)\n  aux <- data.frame(rangos, cero=50,\n                    lab=paste0(100*descuentos,'%'))\n  ggplot(x) +\n    geom_bar(aes(p_price)) +\n    geom_vline(xintercept=rangos, color='red') +\n    geom_text(data=aux,\n              aes(rangos-0.05, cero, label=lab),\n              angle = 90, color='white') +\n    xlim(0,2) +\n    facet_wrap(~ rank) +\n    labs(title='Histograma de proporción de precio por rango de recomendación.\\nLas líneas son los hoteles alcanzados con 0%, 10% y 20% de descuento')\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  x1 <- hoteles_categorias %>%\n    group_by(ID_Hotel) %>%\n    summarise(ncat = n()) %>%\n    right_join(hoteles)\n  \n  ggplot(x1) +\n    geom_bar(aes(ncat)) +\n    facet_wrap(~Nombre_Pais)\n  \n  xtabs(~ ncat + Nombre_Pais, data = x1, exclude = NULL, na.action = na.pass)\n  xtabs(~ ncat + Nombre_Pais, data = x1, exclude = NULL, na.action = na.pass) %>% apply(2, sum)\n  \n  \n  x2 <- hoteles %>%\n    filter(Clav_Pais == 'BR') %>%\n    dplyr::select(longitude, latitude)\n  \n  dim(x2)\n  dim(unique(x2))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1436543554547.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1293396545",
    "id" : "64B36228",
    "lastKnownWriteTime" : 1436544083,
    "path" : "~/recomendacion_de_hoteles/codigo/modelo.R",
    "project_path" : "codigo/modelo.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}