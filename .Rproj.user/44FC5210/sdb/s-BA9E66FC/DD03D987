{
    "contents" : "\nlibrary(RODBC)\nlibrary(dplyr)\nlibrary(tidyr)\n\ncon <- odbcConnect(dsn = 'sysmatrixi',\n                   uid = 'bmxddt005062',\n                   pwd = '')\n\n\n# Lista de hoteles --------------------------------------------------------\n\nclaves_hoteles <- sqlQuery(con,\n\"\nSELECT distinct hc.Clav_Hotel, h.Nombre_Hotel\nFROM Matrix_Reloaded.dbo.Hoteles_Contratos hc with (nolock)\n  INNER JOIN Matrix_Reloaded.dbo.Hoteles h with (nolock)\n    ON hc.Clav_Hotel = h.Clav_Hotel\n  INNER JOIN Matrix_Reloaded.dbo.Hoteles_Servicios hs with (nolock)\n    ON hc.Clav_Hotel = hs.Clav_hotel\nWHERE\n  (\n    h.Clav_Pais in ('AR','MX')\n    OR (h.Clav_Pais = 'BR' AND hc.tipo_notif in ('A','E','H','K'))\n    OR (h.Clav_Pais = 'US' AND hc.tipo_notif in ('A','E','H'))\n  )\n  AND h.Activo = 1  \n  AND h.Internet = 1\n  AND h.latitude IS NOT NULL\n  AND h.longitude IS NOT NULL\nORDER BY hc.Clav_Hotel\n\") %>%\n  mutate(ID_Hotel = row_number())\n\nlista_hoteles <- dplyr::select(claves_hoteles, Clav_Hotel)\n\n# Categoria alimentos (All-Inclusive) -------------------------------------\n\naux_hoteles_alimentos <- sqlQuery(con,\n\"\nSELECT\n  hct.Clav_Hotel,\n  p.Clav_Agrupador,\n\tpa.Nombre_Agrupador\nFROM Matrix_Reloaded.dbo.hoteles_cuartos_Tarifas2 hct\n\tINNER JOIN Matrix_Reloaded.dbo.Planes p\n\t\tON hct.Clav_Plan = p.Clav_Plan\n\tINNER JOIN Matrix_Reloaded.dbo.Planes_Agrupadores pa\n\t\tON p.Clav_Agrupador = pa.Clav_Agrupador\nGROUP BY Clav_Hotel, p.Clav_Agrupador, Nombre_Agrupador\nORDER BY Clav_Hotel, p.Clav_Agrupador, Nombre_Agrupador\n\")\n\nplanes_agrupadores <- aux_hoteles_alimentos %>%\n  dplyr::select(Clav_Agrupador, Nombre_Agrupador) %>%\n  unique\n\n# BLDR (Breakfast, Lunch, Dinner, Beverages)\nagrupadores_categorias <- matrix(c('AI', 'BLDR', 1, 1, 1, 1,\n                                   'BB', 'B---', 1, 0, 0, 0,\n                                   'RO', '----', 0, 0, 0, 0,\n                                   'MD', 'BLDR', 1, 1, 1, 1,\n                                   'SA', 'BLDR', 1, 1, 1, 1,\n                                   'CP', 'B---', 1, 0, 0, 0,\n                                   'DB', 'B---', 1, 0, 0, 0,\n                                   'AG', 'BLDR', 1, 1, 1, 1,\n                                   'FP', 'BLD-', 1, 1, 1, 0,\n                                   'MP', 'B-D-', 1, 0, 1, 0,\n                                   'BD', 'B-D-', 1, 0, 1, 0,\n                                   'GA', '----', 0, 0, 0, 0,\n                                   'ND', '----', 0, 0, 0, 0),\n                                 byrow=T, ncol=6) %>% as.data.frame\nnames(agrupadores_categorias) <- c('Clav_Agrupador','Categoria_Alimentos','BREAKFAST_INCLUDED','LUNCH_INCLUDED','DINNER_INCLUDED','BEVERAGES_INCLUDED')\n\nhoteles_alimentos <- aux_hoteles_alimentos %>%\n  left_join(agrupadores_categorias) %>%\n  mutate(Num_Meals_Included = nchar(gsub('-','',Categoria_Alimentos))) %>%\n  arrange(Clav_Hotel, desc(Num_Meals_Included)) %>%\n  group_by(Clav_Hotel) %>%\n  filter(row_number() == 1)\n\n# Precios -----------------------------------------------------------------\n\n# Precios promedio de dos años para calcular la cerca interior\nprecios_hoteles <- sqlQuery(con,\n\"\nSELECT\n  rh.Clav_Hotel,\n  sum(rh.Noches) as Volumen_Noches,\n  CASE\n    WHEN sum(rh.Noches) = 0 THEN NULL\n    ELSE sum(rh.Importe_Tot_Dlls)/sum(rh.Noches)\n  END as Precio_Dlls,\n  CASE\n    WHEN sum(rh.Noches) = 0 THEN NULL\n    ELSE  sum(rh.Utilidad_Dlls)/sum(rh.Noches)\n  END as Utilidad_Dlls,\n  '20130618 - 20150617' as Date_Range\nFROM Matrix_Reloaded.dbo.Reservacion r with (nolock)\n  INNER JOIN Matrix_Reloaded.dbo.res_Hotel rh with (nolock)\n    ON r.Clav_Res = rh.Clav_Res\nWHERE R.fecha_venta >= '20130618'\n  and R.fecha_venta <= '20150617'\n  and R.Email not like '%@bestday.com%'\n  and R.Email not like '%@hoteldo.com%'\n  and R.Email not like '%@e-travelsolution.com%'\n  and R.status_reserva <> 'X'\n  and R.status_pago='P'\nGROUP BY rh.Clav_Hotel\nORDER BY rh.Clav_Hotel\n\") %>%\n  inner_join(claves_hoteles)\n\n# Hoteles -----------------------------------------------------------------\n\nhoteles <- sqlQuery(con,\n\"\nSELECT\n  h.Clav_Hotel,\n  h.Clav_Estado,\n\th.Clav_Pais,\n  h.Nombre_Hotel,\n\tc.Nombre_Ciudad,\n\te.Nombre_Estado,\n\tp.Nombre_Pais,\n\th.Codigo_Postal,\n\th.Clav_Categoria_Maletas,\n\th.Clav_Destino,\n\th.Clav_Ubicacion,\n\tCASE\n\t\tWHEN h.latitude is NULL THEN 999\n\t\tELSE h.latitude\n\tEND as latitude,\n\tCASE\n\t\tWHEN h.longitude is NULL THEN 999\n\t\tELSE h.longitude\n\tEND as longitude,\n\th.Adult_Only\nFROM Matrix_Reloaded.dbo.Hoteles h with (nolock)\n\tLEFT JOIN Matrix_Reloaded.dbo.Ciudades c with (nolock)\n\t\tON h.Clav_Ciudad = c.Clav_Ciudad\n\tLEFT JOIN Matrix_Reloaded.dbo.Estados e with (nolock)\n\t\tON h.Clav_Estado = e.Clav_Estado\n\tLEFT JOIN Matrix_Reloaded.dbo.Paises p with (nolock)\n\t\tON h.Clav_Pais = p.Clav_Pais\nORDER BY h.Clav_Hotel\n\") %>%\n  inner_join(claves_hoteles) %>%\n  arrange(Clav_Pais, Clav_Hotel) %>%\n  mutate(temp = as.numeric(gsub('[^0-9]', '', Clav_Categoria_Maletas)),\n         Estrellas = ifelse(temp >= 10, temp/10, temp)) %>%\n  dplyr::select(-temp) %>%\n  left_join(precios_hoteles) %>%\n  left_join(hoteles_alimentos)\n\n# Hoteles - Servicios -----------------------------------------------------\n\nruta_mapeo_categorias <- 'datos/mapeo_categorias_servicios.csv'\n\n# Servicios alimenticios (All-Inclusive, etc)\naux <- data.frame(matrix(c('BREAKFAST_INCLUDED', 'Desayuno incluido',\n                           'LUNCH_INCLUDED', 'Comida incluida',\n                           'DINNER_INCLUDED', 'Cena incluida',\n                           'BEVERAGES_INCLUDED', 'Bebidas incluidas'),\n                         byrow = T, ncol = 2, dimnames=list(NULL, c('Clav_Servicio','Nombre_Servicio'))))\nservicios_alimentos <- hoteles %>%\n  dplyr::select(Clav_Hotel, BREAKFAST_INCLUDED, LUNCH_INCLUDED, DINNER_INCLUDED, BEVERAGES_INCLUDED) %>%\n  gather(Clav_Servicio, temp, BREAKFAST_INCLUDED, LUNCH_INCLUDED, DINNER_INCLUDED, BEVERAGES_INCLUDED) %>%\n  filter(temp == 1) %>%\n  dplyr::select(-temp) %>%\n  arrange(Clav_Hotel, Clav_Servicio) %>%\n  left_join(aux)\n\n# Servicios\naux_servicios <- sqlQuery(con,\n\"\nSELECT\n  hs.Clav_Hotel,\n  hs.Clav_Servicio,\n\ts.Nombre_Servicio\nFROM Matrix_Reloaded.dbo.Hoteles_Servicios hs WITH (NOLOCK)\n\tINNER JOIN Matrix_Reloaded.dbo.Servicios s WITH (NOLOCK)\n\t\tON hs.Clav_Servicio = s.Clav_Servicio\nWHERE s.esCasa = 1\nORDER BY s.Orden\n\") %>%\n  inner_join(lista_hoteles) %>%\n  rbind(servicios_alimentos)\n\n# IDs Servicios y categorias\naux_categorias_servicios <- read.csv(ruta_mapeo_categorias, header = T) %>%\n  filter(Categoria != 'ZIGNORE')\nclaves_categorias <- aux_categorias_servicios %>%\n  dplyr::select(Categoria) %>%\n  unique %>%\n  arrange(Categoria) %>%\n  mutate(ID_Categoria = row_number())\nclaves_servicios <- aux_categorias_servicios %>%\n  left_join(claves_categorias)\n\n# Hoteles - Servicios - Categorías\nhoteles_servicios <- aux_servicios %>%\n  inner_join(claves_hoteles) %>%\n  inner_join(claves_servicios) %>%\n  arrange(ID_Hotel, ID_Categoria, ID_Servicio)\n\n# Servicios - Hoteles version matriz rala\ndimnames <- list(\n  claves_servicios %>% .$Clav_Servicio %>% as.character,\n  claves_hoteles$Nombre_Hotel\n)\nservicios_hoteles_sparse <- sparseMatrix(i = hoteles_servicios$ID_Servicio,\n                                         j = hoteles_servicios$ID_Hotel,\n                                         x = 1,\n                                         dimnames = dimnames)\n\n# Categorias de servicios -------------------------------------------------\n\n# IDs de categorias (en sección hoteles - servicios)\n\n# Mapeo Servicios - Categorias (en sección hoteles - servicios)\n\n# Hoteles - Servicios - Categorias\nhoteles_servicios_categorias <- hoteles_servicios\n\n# Maximo numero de servicios por categoria\nmax_num_categ <- claves_servicios %>%\n  group_by(ID_Categoria, Categoria) %>%\n  summarise(Max_Num = n())\n\n# Hoteles - Categorias\nhoteles_categorias <- hoteles_servicios_categorias %>%\n  group_by(Clav_Hotel, Nombre_Hotel, ID_Hotel, Categoria, ID_Categoria) %>%\n  summarise(Cantidad = n()) %>%\n  left_join(max_num_categ) %>%\n  group_by(ID_Hotel) %>%\n  mutate(Cantidad_Norm = Cantidad / Max_Num,\n         Cantidad_Dist = Cantidad / sum(Cantidad)) %>%\n  ungroup\n\n# Categorias - Hoteles matrices anchas por cantidad y por cantidad tipo probabilidad\ndimnames <- list(\n  claves_categorias %>%  .$Categoria %>% as.character,\n  claves_hoteles$Nombre_Hotel\n)\ncategorias_hoteles_sparse_cantidad <- sparseMatrix(i = hoteles_categorias$ID_Categoria,\n                                                   j = hoteles_categorias$ID_Hotel,\n                                                   x = hoteles_categorias$Cantidad,\n                                                   dimnames = dimnames)\n\ncategorias_hoteles_sparse_prob <- sparseMatrix(i = hoteles_categorias$ID_Categoria,\n                                               j = hoteles_categorias$ID_Hotel,\n                                               x = hoteles_categorias$Cantidad_Dist,\n                                               dimnames = dimnames)\n\n# Salvar los resultados ---------------------------------------------------\n\nodbcCloseAll()\nrm(aux, aux_categorias_servicios, aux_hoteles_alimentos, aux_servicios, con, i, j, x, dimnames) # Borramos auxiliares\nlh <- function(qqq){\n  # Pasarle ls(). Regresa los tamanios en mb\n  a <- sapply(qqq, function(x) eval(parse(text = paste0('object.size(',x,')')))) %>%\n    data.frame\n  names(a) <- 'b'\n  a$mb <- format(round(a$b/2^20, 1), )\n  a\n}\nlh(ls())\n\n#setwd(\"entregable_v1\")\n#save.image(file = 'datos/datos_completos.Rdata')\n\n\nhoteles %>%\n  group_by(Clav_Pais) %>%\n  tally #summarise(count = n())\ndim(hoteles)\n\nhoteles_servicios %>%\n  group_by(Clav_Servicio) %>%\n  tally %>% #summarise(count=n()) %>%\n  data.frame\n\n\n\n",
    "created" : 1436543551925.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4252373586",
    "id" : "DD03D987",
    "lastKnownWriteTime" : 1436481401,
    "path" : "~/recomendacion_de_hoteles/codigo/query.R",
    "project_path" : "codigo/query.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}